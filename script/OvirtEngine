#!/bin/sh
#
# Description:  Manages a Ovirt Engine as an OCF High-Availability
#               resource under Heartbeat/LinuxHA control
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#
# Copyright (c) 2013 jarod.w <work.iec23801@gmail.com>
#
#######################################################################
# OCF parameters:
#   OCF_RESKEY_resource_name - The name of the resource. Default is ${OCF_RESOURCE_INSTANCE}
#   OCF_RESKEY_console - A destination of the log of ovirt engine run and shutdown script. Default is /var/log/ovirt-engine/engine.log
#   OCF_RESKEY_shutdown_timeout - Time-out at the time of the stop. Default is 45
#   OCF_RESKEY_kill_timeout - The re-try number of times awaiting a stop. Default is 10
#   OCF_RESKEY_statusurl - URL for state confirmation. Default is https://127.0.0.1/api/
#   OCF_RESKEY_java_home - Home directory of the Java. Default is ${JAVA_HOME}
#   OCF_RESKEY_pstring - String Ovirt Engine will found in procceslist. Default is "org.jboss.as.standalone -c engine-service.xml"
#   OCF_RESKEY_admin_name - admin user name for monitor . Default is admin@internal
#   OCF_RESKEY_admin_passwd - admin passwd for monitor . Default is abc123linux
###############################################################################


: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

# Load the sysconfig file into the environment:
if [ -f /etc/sysconfig/ovirt-engine ]
then
  . /etc/sysconfig/ovirt-engine
fi

export ENGINE_USER
export ENGINE_GROUP
export ENGINE_MIN_HEAP
export ENGINE_MAX_HEAP
export ENGINE_DEBUG_ADDRESS
export ENGINE_VERBOSE_GC

usage()
{
	cat <<-!
usage: $0 action

action:
        start   start ovirt engine

        stop    stop ovirt engine

        status  return the status of ovirt engine, run or down

        monitor  return TRUE if the ovirt engine appears to be working.
                 You have to have installed $WGETNAME for this to work.

        meta-data       show meta data message

        validate-all    validate the instance parameters
!
	return $OCF_ERR_ARGS
}

isrunning_ovirt()
{
	if wget -O /dev/null --auth-no-challenge --http-user=$ADMINUSER --http-password=$ADMINPWD --no-check-certificate $STATUSURL 2>/dev/nll; then
		return $OCF_SUCCESS
	fi
	# ovirt engine service error
	return $OCF_ERR_GENERIC
}

monitor_ovirt()
{
	if ! pgrep -f "$PSTRING" > /dev/null; then
		return $OCF_NOT_RUNNING
	fi
	isrunning_ovirt
}

start_ovirt()
{
	monitor_ovirt
	if [ $? = $OCF_SUCCESS ]; then
		return $OCF_SUCCESS
	fi

	ocf_log info "Starting Ovirt Engine[$RESOURCE_NAME]"

        /usr/share/ovirt-engine/service/engine-service.py.ct start

	while true; do
		monitor_ovirt
		if [ $? = $OCF_SUCCESS ]; then
			break
		fi
		ocf_log debug "start_ovirt[$RESOURCE_NAME]: retry monitor_ovirt"
		sleep 3
	done

	return $OCF_SUCCESS
}

stop_ovirt()
{
	ocf_log info "Stopping Ovirt Engine[$RESOURCE_NAME]"

        /usr/share/ovirt-engine/service/engine-service.py.ct stop

	lapse_sec=0
	while pgrep -f "$PSTRING" > /dev/null; do
		sleep 1
		lapse_sec=`expr $lapse_sec + 1`
		ocf_log info "stop_ovirt[$RESOURCE_NAME]: stop NORM $lapse_sec/$SHUTDOWN_TIMEOUT"
		if [ $lapse_sec -ge $SHUTDOWN_TIMEOUT ]; then
			break
		fi
	done

	if pgrep -f "$PSTRING" > /dev/null; then 
		ocf_log info "stop_ovirt[$RESOURCE_NAME]: output a JVM thread dump to $CONSOLE"
		pkill -QUIT -f "$PSTRING"
		lapse_sec=0
		while true; do
			sleep 1
			lapse_sec=`expr $lapse_sec + 1`
			ocf_log info "stop_ovirt[$RESOURCE_NAME]: kill jboss by SIGTERM ($lapse_sec/$KILL_TIMEOUT)"
			pkill -TERM -f "$PSTRING"
			if pgrep -f "$PSTRING" > /dev/null; then
				if [ $lapse_sec -ge $KILL_TIMEOUT ]; then
					break
				fi
			else
				break
			fi
		done
	fi
	# If the Ovirt process hangs, Ovirt RA waits $SHUTDOWN_TIMEOUT
	# seconds and tries kill TERM and QUIT for $KILL_TIMEOUT seconds.
	# The stop timeout of RA should be
	# longer than $SHUTDOWN_TIMEOUT + $KILL_TIMEOUT.
	lapse_sec=0
	while pgrep -f "$PSTRING" > /dev/null; do
		sleep 1
		lapse_sec=`expr $lapse_sec + 1`
		ocf_log info "stop_ovirt[$RESOURCE_NAME]: kill ovirt by SIGKILL ($lapse_sec/@@@)"
		pkill -KILL -f "$PSTRING"
	done
	return $OCF_SUCCESS
}

status_ovirt()
{
        if ! pgrep -f "$PSTRING" > /dev/null; then
                echo "Ovirt process[$RESOURCE_NAME] is not running."
                return $OCF_NOT_RUNNING
        fi

        if isrunning_ovirt; then
                echo "Ovirt[$RESOURCE_NAME] is running."
                return $OCF_SUCCESS
        else
                echo "Ovirt process[$RESOURCE_NAME] is running."
                echo "But, we can not access Ovirt Engine."
                return $OCF_NOT_RUNNING
        fi
}


metadata_ovirt()
{
    cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="OvirtEngine">
<version>1.0</version>

<longdesc lang="en">
Resource script for Ovirt Engine. It manages an ovirt engine instance as an HA resource.
</longdesc>
<shortdesc lang="en">Manages an ovirt engine instance</shortdesc>

<parameters>

<parameter name="resource_name" unique="1" required="0">
<longdesc lang="en">
The name of the resource. Defaults to the name of the resource
instance.
</longdesc>
<shortdesc>The name of the resource</shortdesc>
<content type="string" default="${OCF_RESOURCE_INSTANCE}" />
</parameter>

<parameter name="console" unique="1" required="0">
<longdesc lang="en">
A destination of the log of ovirt engine run and shutdown script.
</longdesc>
<shortdesc>jboss log path</shortdesc>
<content type="string" default="" />
</parameter>

<parameter name="kill_timeout" unique="0" required="0">
<longdesc lang="en">
If it doesn't stop the ovirt engine process, then we send
it TERM and QUIT signals, intermittently and once a second. After
this timeout expires, if the process is still live, we use the
KILL signal. See also shutdown_timeout.
</longdesc>
<shortdesc>stop by signal timeout</shortdesc>
<content type="integer" default="10" />
</parameter>

<parameter name="user" unique="0" required="0">
<longdesc lang="en">
A user name to start a JBoss.
</longdesc>
<shortdesc>A user name to start a resource.</shortdesc>
<content type="string" default="root"/>
</parameter>

<parameter name="statusurl" unique="0" required="0">
<longdesc lang="en">
URL to test in the monitor operation.
</longdesc>
<shortdesc>URL to test in the monitor operation.</shortdesc>
<content type="string" default="http://127.0.0.1:8080" />
</parameter>

<parameter name="java_home" unique="0" required="0">
<longdesc lang="en">
Home directory of Java. Defaults to the environment variable
JAVA_HOME. If it is not set, then define this parameter.
</longdesc>
<shortdesc>Home directory of Java.</shortdesc>
<content type="string" default="$JAVA_HOME"/>
</parameter>

<parameter name="admin_name" unique="1" required="0">
<longdesc lang="en">
The name of admin for ovirt engine.
</longdesc>
<shortdesc>Admin name for ovirt engine</shortdesc>
<content type="string" default=""/>
</parameter>

<parameter name="admin_passwd" unique="1" required="0">
<longdesc lang="en">
The password of admin for ovirt engine.
</longdesc>
<shortdesc>Admin password for ovirt engine</shortdesc>
<content type="string" default=""/>
</parameter>

<parameter name="pstring" unique="0" required="0">
<longdesc lang="en">
With this string heartbeat matches for the right process to kill.
</longdesc>
<shortdesc>pkill/pgrep search string</shortdesc>
<content type="string" default="java -Dprogram.name=run.sh" />
</parameter>

</parameters>

<actions>
<action name="start" timeout="60s" />
<action name="stop" timeout="120s" />
<action name="status" timeout="30s" />
<action name="monitor" depth="0" timeout="30s" interval="10s" />
<action name="meta-data" timeout="5s" />
<action name="validate-all"  timeout="5"/>
</actions>
</resource-agent>
END
	return $OCF_SUCCESS
}

validate_all_ovirt()
{
	ocf_log info "validate_all_ovirt[$RESOURCE_NAME]"
	return $OCF_SUCCESS
}

COMMAND=$1
RESOURCE_NAME="${OCF_RESKEY_resource_name-${OCF_RESOURCE_INSTANCE}}"
CONSOLE="${OCF_RESKEY_console-/var/log/ovirt-engine/engine.log}"
SHUTDOWN_TIMEOUT="${OCF_RESKEY_shutdown_timeout-45}"
KILL_TIMEOUT="${OCF_RESKEY_kill_timeout-10}"
STATUSURL="${OCF_RESKEY_statusurl-https://127.0.0.1/api/}"
PSTRING="${OCF_RESKEY_pstring-org.jboss.as.standalone -c engine-service.xml}"
ADMINUSER="${OCF_RESKEY_admin_name-admin@internal}"
ADMINPWD="${OCF_RESKEY_admin_passwd-abc123linux}"


if [ $# -ne 1 ]; then
	usage
	exit $OCF_ERR_ARGS
fi

if [ "$COMMAND" = "meta-data" ]; then
	metadata_ovirt
	exit $OCF_SUCCESS
fi
if [ "$COMMAND" = "help" -o "$COMMAND" = "usage" ]; then
	usage
	exit $OCF_SUCCESS
fi

# test if these two are set and if directories exist and if the
# required scripts/binaries exist; use OCF_ERR_INSTALLED
JAVA_HOME="${OCF_RESKEY_java_home-${JAVA_HOME}}"

if [ ! -d "$JAVA_HOME" ]; then
	case $COMMAND in
		stop)		exit	$OCF_SUCCESS;;
		monitor)	exit	$OCF_NOT_RUNNING;;
		status)		exit	$LSB_STATUS_STOPPED;;
	esac
	ocf_log err "JAVA_HOME does not exist."
	exit $OCF_ERR_INSTALLED
fi

export JAVA_HOME JBOSS_HOME

JAVA=${JAVA_HOME}/bin/java

if [ ! -x "$JAVA" ]; then
	case $COMMAND in
		stop)		exit	$OCF_SUCCESS;;
		monitor)	exit	$OCF_NOT_RUNNING;;
		status)		exit	$LSB_STATUS_STOPPED;;
	esac
	ocf_log err "java command does not exist."
	exit $OCF_ERR_INSTALLED
fi

case "$COMMAND" in
	start)
		#ocf_log debug  "[$RESOURCE_NAME] Enter jboss start"
		start_ovirt
		func_status=$?
		#ocf_log debug  "[$RESOURCE_NAME] Leave jboss start $func_status"
		exit $func_status
		;;
	stop)
		#ocf_log debug  "[$RESOURCE_NAME] Enter jboss stop"
		stop_ovirt
		func_status=$?
		#ocf_log debug  "[$RESOURCE_NAME] Leave jboss stop $func_status"
		exit $func_status
		;;
	status)
		status_ovirt
		exit $?
		;;
	monitor)
		monitor_ovirt
		func_status=$?
		exit $func_status
		;;
	validate-all)
		validate_all_ovirt
		exit $?
		;;
	*)
		usage
		exit $OCF_ERR_UNIMPLEMENTED;;
esac

